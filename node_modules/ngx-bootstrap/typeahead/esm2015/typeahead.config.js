/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
/**
 * Default values provider for typeahead
 */
import * as ɵngcc0 from '@angular/core';
export class TypeaheadConfig {
    constructor() {
        /**
         * sets use adaptive position
         */
        this.adaptivePosition = false;
        /**
         * turn on/off animation
         */
        this.isAnimated = false;
        /**
         * used to hide results on blur
         */
        this.hideResultsOnBlur = true;
        /**
         * if true, typeahead will cancel async request on blur
         */
        this.cancelRequestOnFocusLost = false;
        /**
         * used to choose the first item in typeahead container
         */
        this.selectFirstItem = true;
        /**
         * used to active/inactive the first item in typeahead container
         */
        this.isFirstItemActive = true;
        /**
         * used to choose set minimal no of characters that needs to
         * be entered before typeahead kicks-in
         */
        this.minLength = 1;
    }
}
TypeaheadConfig.ɵfac = function TypeaheadConfig_Factory(t) { return new (t || TypeaheadConfig)(); };
TypeaheadConfig.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: TypeaheadConfig, factory: TypeaheadConfig.ɵfac });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TypeaheadConfig, [{
        type: Injectable
    }], function () { return []; }, null); })();
if (false) {
    /**
     * sets use adaptive position
     * @type {?}
     */
    TypeaheadConfig.prototype.adaptivePosition;
    /**
     * turn on/off animation
     * @type {?}
     */
    TypeaheadConfig.prototype.isAnimated;
    /**
     * used to hide results on blur
     * @type {?}
     */
    TypeaheadConfig.prototype.hideResultsOnBlur;
    /**
     * if true, typeahead will cancel async request on blur
     * @type {?}
     */
    TypeaheadConfig.prototype.cancelRequestOnFocusLost;
    /**
     * used to choose the first item in typeahead container
     * @type {?}
     */
    TypeaheadConfig.prototype.selectFirstItem;
    /**
     * used to active/inactive the first item in typeahead container
     * @type {?}
     */
    TypeaheadConfig.prototype.isFirstItemActive;
    /**
     * used to choose set minimal no of characters that needs to
     * be entered before typeahead kicks-in
     * @type {?}
     */
    TypeaheadConfig.prototype.minLength;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZWFoZWFkLmNvbmZpZy5qcyIsInNvdXJjZXMiOlsibmc6L25neC1ib290c3RyYXAvdHlwZWFoZWFkL3R5cGVhaGVhZC5jb25maWcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0M7QUFDRztBQUF5Qzs7QUFFNUMsTUFBTSxPQUFPLGVBQWU7QUFDNUIsSUFGQTtBQUNFO0FBQVk7QUFDTztBQUFZLFFBQy9CLHFCQUFnQixHQUFHLEtBQUssQ0FBQztBQUMzQjtBQUFZO0FBQ0U7QUFDVixRQURGLGVBQVUsR0FBRyxLQUFLLENBQUM7QUFDckI7QUFBWTtBQUNFO0FBQVksUUFBeEIsc0JBQWlCLEdBQUcsSUFBSSxDQUFDO0FBQzNCO0FBQVk7QUFDRTtBQUFZLFFBQXhCLDZCQUF3QixHQUFHLEtBQUssQ0FBQztBQUNuQztBQUFZO0FBQ0U7QUFDZCxRQURFLG9CQUFlLEdBQUcsSUFBSSxDQUFDO0FBQ3pCO0FBQVk7QUFDRTtBQUFZLFFBQXhCLHNCQUFpQixHQUFHLElBQUksQ0FBQztBQUMzQjtBQUFZO0FBQ0s7QUFHakI7QUFDVSxRQUZSLGNBQVMsR0FBRyxDQUFDLENBQUM7QUFDaEIsSUFBQSxDQUFDO0FBQ0Q7MkNBbkJDLFVBQVU7Ozs7Z0RBQ1Q7QUFBQztBQUFhO0FBQVE7QUFDRztBQUNuQjtBQUFRLElBQWQsMkNBQXlCO0FBQzNCO0FBQVE7QUFDRjtBQUNMO0FBQVEsSUFEUCxxQ0FBbUI7QUFDckI7QUFBUTtBQUNGO0FBQWlCO0FBQ3BCLElBREQsNENBQXlCO0FBQzNCO0FBQVE7QUFDRjtBQUFpQjtBQUFRLElBQTdCLG1EQUFpQztBQUNuQztBQUFRO0FBQ0Y7QUFBaUI7QUFDbEIsSUFESCwwQ0FBdUI7QUFDekI7QUFBUTtBQUNGO0FBQWlCO0FBQ3BCLElBREQsNENBQXlCO0FBQzNCO0FBQVE7QUFDQztBQUVKO0FBRUY7QUFBUSxJQUZULG9DQUFjO0FBQ2hCO0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbi8qKiBEZWZhdWx0IHZhbHVlcyBwcm92aWRlciBmb3IgdHlwZWFoZWFkICovXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgVHlwZWFoZWFkQ29uZmlnIHtcbiAgLyoqIHNldHMgdXNlIGFkYXB0aXZlIHBvc2l0aW9uICovXG4gIGFkYXB0aXZlUG9zaXRpb24gPSBmYWxzZTtcbiAgLyoqIHR1cm4gb24vb2ZmIGFuaW1hdGlvbiAqL1xuICBpc0FuaW1hdGVkID0gZmFsc2U7XG4gIC8qKiB1c2VkIHRvIGhpZGUgcmVzdWx0cyBvbiBibHVyICovXG4gIGhpZGVSZXN1bHRzT25CbHVyID0gdHJ1ZTtcbiAgLyoqIGlmIHRydWUsIHR5cGVhaGVhZCB3aWxsIGNhbmNlbCBhc3luYyByZXF1ZXN0IG9uIGJsdXIgKi9cbiAgY2FuY2VsUmVxdWVzdE9uRm9jdXNMb3N0ID0gZmFsc2U7XG4gIC8qKiB1c2VkIHRvIGNob29zZSB0aGUgZmlyc3QgaXRlbSBpbiB0eXBlYWhlYWQgY29udGFpbmVyICovXG4gIHNlbGVjdEZpcnN0SXRlbSA9IHRydWU7XG4gIC8qKiB1c2VkIHRvIGFjdGl2ZS9pbmFjdGl2ZSB0aGUgZmlyc3QgaXRlbSBpbiB0eXBlYWhlYWQgY29udGFpbmVyICovXG4gIGlzRmlyc3RJdGVtQWN0aXZlID0gdHJ1ZTtcbiAgLyoqIHVzZWQgdG8gY2hvb3NlIHNldCBtaW5pbWFsIG5vIG9mIGNoYXJhY3RlcnMgdGhhdCBuZWVkcyB0b1xuICAgKiBiZSBlbnRlcmVkIGJlZm9yZSB0eXBlYWhlYWQga2lja3MtaW5cbiAgICovXG4gIG1pbkxlbmd0aCA9IDE7XG59XG4iXX0=