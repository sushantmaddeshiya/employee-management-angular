/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
var BsDatepickerActions = /** @class */ (function () {
    function BsDatepickerActions() {
    }
    /**
     * @return {?}
     */
    BsDatepickerActions.prototype.calculate = /**
     * @return {?}
     */
    function () {
        return { type: BsDatepickerActions.CALCULATE };
    };
    /**
     * @return {?}
     */
    BsDatepickerActions.prototype.format = /**
     * @return {?}
     */
    function () {
        return { type: BsDatepickerActions.FORMAT };
    };
    /**
     * @return {?}
     */
    BsDatepickerActions.prototype.flag = /**
     * @return {?}
     */
    function () {
        return { type: BsDatepickerActions.FLAG };
    };
    /**
     * @param {?} date
     * @return {?}
     */
    BsDatepickerActions.prototype.select = /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        return {
            type: BsDatepickerActions.SELECT,
            payload: date
        };
    };
    /**
     * @param {?} event
     * @return {?}
     */
    BsDatepickerActions.prototype.changeViewMode = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        return {
            type: BsDatepickerActions.CHANGE_VIEWMODE,
            payload: event
        };
    };
    /**
     * @param {?} event
     * @return {?}
     */
    BsDatepickerActions.prototype.navigateTo = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        return {
            type: BsDatepickerActions.NAVIGATE_TO,
            payload: event
        };
    };
    /**
     * @param {?} step
     * @return {?}
     */
    BsDatepickerActions.prototype.navigateStep = /**
     * @param {?} step
     * @return {?}
     */
    function (step) {
        return {
            type: BsDatepickerActions.NAVIGATE_OFFSET,
            payload: step
        };
    };
    /**
     * @param {?} options
     * @return {?}
     */
    BsDatepickerActions.prototype.setOptions = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        return {
            type: BsDatepickerActions.SET_OPTIONS,
            payload: options
        };
    };
    // date range picker
    // date range picker
    /**
     * @param {?} value
     * @return {?}
     */
    BsDatepickerActions.prototype.selectRange = 
    // date range picker
    /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return {
            type: BsDatepickerActions.SELECT_RANGE,
            payload: value
        };
    };
    /**
     * @param {?} event
     * @return {?}
     */
    BsDatepickerActions.prototype.hoverDay = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        return {
            type: BsDatepickerActions.HOVER,
            payload: event.isHovered ? event.cell.date : null
        };
    };
    /**
     * @param {?} date
     * @return {?}
     */
    BsDatepickerActions.prototype.minDate = /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        return {
            type: BsDatepickerActions.SET_MIN_DATE,
            payload: date
        };
    };
    /**
     * @param {?} date
     * @return {?}
     */
    BsDatepickerActions.prototype.maxDate = /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        return {
            type: BsDatepickerActions.SET_MAX_DATE,
            payload: date
        };
    };
    /**
     * @param {?} days
     * @return {?}
     */
    BsDatepickerActions.prototype.daysDisabled = /**
     * @param {?} days
     * @return {?}
     */
    function (days) {
        return {
            type: BsDatepickerActions.SET_DAYSDISABLED,
            payload: days
        };
    };
    /**
     * @param {?} dates
     * @return {?}
     */
    BsDatepickerActions.prototype.datesDisabled = /**
     * @param {?} dates
     * @return {?}
     */
    function (dates) {
        return {
            type: BsDatepickerActions.SET_DATESDISABLED,
            payload: dates
        };
    };
    /**
     * @param {?} dates
     * @return {?}
     */
    BsDatepickerActions.prototype.datesEnabled = /**
     * @param {?} dates
     * @return {?}
     */
    function (dates) {
        return {
            type: BsDatepickerActions.SET_DATESENABLED,
            payload: dates
        };
    };
    /**
     * @param {?} value
     * @return {?}
     */
    BsDatepickerActions.prototype.isDisabled = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return {
            type: BsDatepickerActions.SET_IS_DISABLED,
            payload: value
        };
    };
    /**
     * @param {?} value
     * @return {?}
     */
    BsDatepickerActions.prototype.setDateCustomClasses = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return {
            type: BsDatepickerActions.SET_DATE_CUSTOM_CLASSES,
            payload: value
        };
    };
    /**
     * @param {?} locale
     * @return {?}
     */
    BsDatepickerActions.prototype.setLocale = /**
     * @param {?} locale
     * @return {?}
     */
    function (locale) {
        return {
            type: BsDatepickerActions.SET_LOCALE,
            payload: locale
        };
    };
    BsDatepickerActions.CALCULATE = '[datepicker] calculate dates matrix';
    BsDatepickerActions.FORMAT = '[datepicker] format datepicker values';
    BsDatepickerActions.FLAG = '[datepicker] set flags';
    BsDatepickerActions.SELECT = '[datepicker] select date';
    BsDatepickerActions.NAVIGATE_OFFSET = '[datepicker] shift view date';
    BsDatepickerActions.NAVIGATE_TO = '[datepicker] change view date';
    BsDatepickerActions.SET_OPTIONS = '[datepicker] update render options';
    BsDatepickerActions.HOVER = '[datepicker] hover date';
    BsDatepickerActions.CHANGE_VIEWMODE = '[datepicker] switch view mode';
    BsDatepickerActions.SET_MIN_DATE = '[datepicker] set min date';
    BsDatepickerActions.SET_MAX_DATE = '[datepicker] set max date';
    BsDatepickerActions.SET_DAYSDISABLED = '[datepicker] set days disabled';
    BsDatepickerActions.SET_DATESDISABLED = '[datepicker] set dates disabled';
    BsDatepickerActions.SET_DATESENABLED = '[datepicker] set dates enabled';
    BsDatepickerActions.SET_IS_DISABLED = '[datepicker] set is disabled';
    BsDatepickerActions.SET_DATE_CUSTOM_CLASSES = '[datepicker] set date custom classes';
    BsDatepickerActions.SET_LOCALE = '[datepicker] set datepicker locale';
    BsDatepickerActions.SELECT_RANGE = '[daterangepicker] select dates range';
BsDatepickerActions.ɵfac = function BsDatepickerActions_Factory(t) { return new (t || BsDatepickerActions)(); };
BsDatepickerActions.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: BsDatepickerActions, factory: function (t) { return BsDatepickerActions.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(BsDatepickerActions, [{
        type: Injectable
    }], function () { return []; }, null); })();
    return BsDatepickerActions;
}());
export { BsDatepickerActions };
if (false) {
    /** @type {?} */
    BsDatepickerActions.CALCULATE;
    /** @type {?} */
    BsDatepickerActions.FORMAT;
    /** @type {?} */
    BsDatepickerActions.FLAG;
    /** @type {?} */
    BsDatepickerActions.SELECT;
    /** @type {?} */
    BsDatepickerActions.NAVIGATE_OFFSET;
    /** @type {?} */
    BsDatepickerActions.NAVIGATE_TO;
    /** @type {?} */
    BsDatepickerActions.SET_OPTIONS;
    /** @type {?} */
    BsDatepickerActions.HOVER;
    /** @type {?} */
    BsDatepickerActions.CHANGE_VIEWMODE;
    /** @type {?} */
    BsDatepickerActions.SET_MIN_DATE;
    /** @type {?} */
    BsDatepickerActions.SET_MAX_DATE;
    /** @type {?} */
    BsDatepickerActions.SET_DAYSDISABLED;
    /** @type {?} */
    BsDatepickerActions.SET_DATESDISABLED;
    /** @type {?} */
    BsDatepickerActions.SET_DATESENABLED;
    /** @type {?} */
    BsDatepickerActions.SET_IS_DISABLED;
    /** @type {?} */
    BsDatepickerActions.SET_DATE_CUSTOM_CLASSES;
    /** @type {?} */
    BsDatepickerActions.SET_LOCALE;
    /** @type {?} */
    BsDatepickerActions.SELECT_RANGE;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnMtZGF0ZXBpY2tlci5hY3Rpb25zLmpzIiwic291cmNlcyI6WyJuZzovbmd4LWJvb3RzdHJhcC9kYXRlcGlja2VyL3JlZHVjZXIvYnMtZGF0ZXBpY2tlci5hY3Rpb25zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDOztBQVczQztBQUVNLElBRk47QUFDbUIsSUE0SW5CLENBQUM7QUFDRDtBQUFRO0FBQW1CO0FBQVEsSUF0SGpDLHVDQUFTO0FBQU87QUFDTDtBQUFRLElBRG5CO0FBQWMsUUFDWixPQUFPLEVBQUUsSUFBSSxFQUFFLG1CQUFtQixDQUFDLFNBQVMsRUFBRSxDQUFDO0FBQ25ELElBQUUsQ0FBQztBQUVIO0FBQVE7QUFDRjtBQUFRLElBRFosb0NBQU07QUFBTztBQUNGO0FBQVEsSUFEbkI7QUFBYyxRQUNaLE9BQU8sRUFBRSxJQUFJLEVBQUUsbUJBQW1CLENBQUMsTUFBTSxFQUFFLENBQUM7QUFDaEQsSUFBRSxDQUFDO0FBRUg7QUFBUTtBQUNBO0FBQVEsSUFEZCxrQ0FBSTtBQUFPO0FBQ0E7QUFBUSxJQURuQjtBQUFjLFFBQ1osT0FBTyxFQUFFLElBQUksRUFBRSxtQkFBbUIsQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUM5QyxJQUFFLENBQUM7QUFFSDtBQUFRO0FBQ1I7QUFDTTtBQUFRLElBRlosb0NBQU07QUFBTztBQUNSO0FBQ007QUFBUSxJQUZuQixVQUFPLElBQVU7QUFBSSxRQUNuQixPQUFPO0FBQ1gsWUFBTSxJQUFJLEVBQUUsbUJBQW1CLENBQUMsTUFBTTtBQUN0QyxZQUFNLE9BQU8sRUFBRSxJQUFJO0FBQ25CLFNBQUssQ0FBQztBQUNOLElBQUUsQ0FBQztBQUVIO0FBQVE7QUFBd0I7QUFBbUI7QUFDaEQsSUFERCw0Q0FBYztBQUFPO0FBQXdCO0FBQ3JDO0FBQ0wsSUFGSCxVQUFlLEtBQTJCO0FBQUksUUFDNUMsT0FBTztBQUNYLFlBQU0sSUFBSSxFQUFFLG1C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QW5CLHFDQUFvRTtBQUN0RTtBQUFxQixJQUFuQixzQ0FBc0U7QUFDeEU7QUFBcUIsSUFBbkIscUNBQW9FO0FBQ3RFO0FBQXFCLElBQW5CLG9DQUFpRTtBQUNuRTtBQUFxQixJQUFuQiw0Q0FBaUY7QUFDbkY7QUFDb0IsSUFBbEIsK0JBQWtFO0FBQ3BFO0FBQ29CLElBQWxCLGlDQUFzRTtBQUN4RTtBQUNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgVGltZVVuaXQgfSBmcm9tICduZ3gtYm9vdHN0cmFwL2Nocm9ub3MnO1xuaW1wb3J0IHsgQWN0aW9uIH0gZnJvbSAnbmd4LWJvb3RzdHJhcC9taW5pLW5ncngnO1xuaW1wb3J0IHtcbiAgQnNEYXRlcGlja2VyVmlld01vZGUsXG4gIEJzVmlld05hdmlnYXRpb25FdmVudCxcbiAgQ2VsbEhvdmVyRXZlbnQsXG4gIERhdGVwaWNrZXJSZW5kZXJPcHRpb25zLFxuICBEYXRlcGlja2VyRGF0ZUN1c3RvbUNsYXNzZXNcbn0gZnJvbSAnLi4vbW9kZWxzJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEJzRGF0ZXBpY2tlckFjdGlvbnMge1xuICBzdGF0aWMgcmVhZG9ubHkgQ0FMQ1VMQVRFID0gJ1tkYXRlcGlja2VyXSBjYWxjdWxhdGUgZGF0ZXMgbWF0cml4JztcbiAgc3RhdGljIHJlYWRvbmx5IEZPUk1BVCA9ICdbZGF0ZXBpY2tlcl0gZm9ybWF0IGRhdGVwaWNrZXIgdmFsdWVzJztcbiAgc3RhdGljIHJlYWRvbmx5IEZMQUcgPSAnW2RhdGVwaWNrZXJdIHNldCBmbGFncyc7XG4gIHN0YXRpYyByZWFkb25seSBTRUxFQ1QgPSAnW2RhdGVwaWNrZXJdIHNlbGVjdCBkYXRlJztcbiAgc3RhdGljIHJlYWRvbmx5IE5BVklHQVRFX09GRlNFVCA9ICdbZGF0ZXBpY2tlcl0gc2hpZnQgdmlldyBkYXRlJztcbiAgc3RhdGljIHJlYWRvbmx5IE5BVklHQVRFX1RPID0gJ1tkYXRlcGlja2VyXSBjaGFuZ2UgdmlldyBkYXRlJztcbiAgc3RhdGljIHJlYWRvbmx5IFNFVF9PUFRJT05TID0gJ1tkYXRlcGlja2VyXSB1cGRhdGUgcmVuZGVyIG9wdGlvbnMnO1xuICBzdGF0aWMgcmVhZG9ubHkgSE9WRVIgPSAnW2RhdGVwaWNrZXJdIGhvdmVyIGRhdGUnO1xuICBzdGF0aWMgcmVhZG9ubHkgQ0hBTkdFX1ZJRVdNT0RFID0gJ1tkYXRlcGlja2VyXSBzd2l0Y2ggdmlldyBtb2RlJztcblxuICBzdGF0aWMgcmVhZG9ubHkgU0VUX01JTl9EQVRFID0gJ1tkYXRlcGlja2VyXSBzZXQgbWluIGRhdGUnO1xuICBzdGF0aWMgcmVhZG9ubHkgU0VUX01BWF9EQVRFID0gJ1tkYXRlcGlja2VyXSBzZXQgbWF4IGRhdGUnO1xuICBzdGF0aWMgcmVhZG9ubHkgU0VUX0RBWVNESVNBQkxFRCA9ICdbZGF0ZXBpY2tlcl0gc2V0IGRheXMgZGlzYWJsZWQnO1xuICBzdGF0aWMgcmVhZG9ubHkgU0VUX0RBVEVTRElTQUJMRUQgPSAnW2RhdGVwaWNrZXJdIHNldCBkYXRlcyBkaXNhYmxlZCc7XG4gIHN0YXRpYyByZWFkb25seSBTRVRfREFURVNFTkFCTEVEID0gJ1tkYXRlcGlja2VyXSBzZXQgZGF0ZXMgZW5hYmxlZCc7XG4gIHN0YXRpYyByZWFkb25seSBTRVRfSVNfRElTQUJMRUQgPSAnW2RhdGVwaWNrZXJdIHNldCBpcyBkaXNhYmxlZCc7XG4gIHN0YXRpYyByZWFkb25seSBTRVRfREFURV9DVVNUT01fQ0xBU1NFUyA9ICdbZGF0ZXBpY2tlcl0gc2V0IGRhdGUgY3VzdG9tIGNsYXNzZXMnO1xuXG4gIHN0YXRpYyByZWFkb25seSBTRVRfTE9DQUxFID0gJ1tkYXRlcGlja2VyXSBzZXQgZGF0ZXBpY2tlciBsb2NhbGUnO1xuXG4gIHN0YXRpYyByZWFkb25seSBTRUxFQ1RfUkFOR0UgPSAnW2RhdGVyYW5nZXBpY2tlcl0gc2VsZWN0IGRhdGVzIHJhbmdlJztcblxuICBjYWxjdWxhdGUoKTogQWN0aW9uIHtcbiAgICByZXR1cm4geyB0eXBlOiBCc0RhdGVwaWNrZXJBY3Rpb25zLkNBTENVTEFURSB9O1xuICB9XG5cbiAgZm9ybWF0KCk6IEFjdGlvbiB7XG4gICAgcmV0dXJuIHsgdHlwZTogQnNEYXRlcGlja2VyQWN0aW9ucy5GT1JNQVQgfTtcbiAgfVxuXG4gIGZsYWcoKTogQWN0aW9uIHtcbiAgICByZXR1cm4geyB0eXBlOiBCc0RhdGVwaWNrZXJBY3Rpb25zLkZMQUcgfTtcbiAgfVxuXG4gIHNlbGVjdChkYXRlOiBEYXRlKTogQWN0aW9uIHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogQnNEYXRlcGlja2VyQWN0aW9ucy5TRUxFQ1QsXG4gICAgICBwYXlsb2FkOiBkYXRlXG4gICAgfTtcbiAgfVxuXG4gIGNoYW5nZVZpZXdNb2RlKGV2ZW50OiBCc0RhdGVwaWNrZXJWaWV3TW9kZSk6IEFjdGlvbiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IEJzRGF0ZXBpY2tlckFjdGlvbnMuQ0hBTkdFX1ZJRVdNT0RFLFxuICAgICAgcGF5bG9hZDogZXZlbnRcbiAgICB9O1xuICB9XG5cbiAgbmF2aWdhdGVUbyhldmVudDogQnNWaWV3TmF2aWdhdGlvbkV2ZW50KTogQWN0aW9uIHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogQnNEYXRlcGlja2VyQWN0aW9ucy5OQVZJR0FURV9UTyxcbiAgICAgIHBheWxvYWQ6IGV2ZW50XG4gICAgfTtcbiAgfVxuXG4gIG5hdmlnYXRlU3RlcChzdGVwOiBUaW1lVW5pdCk6IEFjdGlvbiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IEJzRGF0ZXBpY2tlckFjdGlvbnMuTkFWSUdBVEVfT0ZGU0VULFxuICAgICAgcGF5bG9hZDogc3RlcFxuICAgIH07XG4gIH1cblxuICBzZXRPcHRpb25zKG9wdGlvbnM6IERhdGVwaWNrZXJSZW5kZXJPcHRpb25zKTogQWN0aW9uIHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogQnNEYXRlcGlja2VyQWN0aW9ucy5TRVRfT1BUSU9OUyxcbiAgICAgIHBheWxvYWQ6IG9wdGlvbnNcbiAgICB9O1xuICB9XG5cbiAgLy8gZGF0ZSByYW5nZSBwaWNrZXJcbiAgc2VsZWN0UmFuZ2UodmFsdWU6IERhdGVbXSk6IEFjdGlvbiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IEJzRGF0ZXBpY2tlckFjdGlvbnMuU0VMRUNUX1JBTkdFLFxuICAgICAgcGF5bG9hZDogdmFsdWVcbiAgICB9O1xuICB9XG5cbiAgaG92ZXJEYXkoZXZlbnQ6IENlbGxIb3ZlckV2ZW50KTogQWN0aW9uIHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogQnNEYXRlcGlja2VyQWN0aW9ucy5IT1ZFUixcbiAgICAgIHBheWxvYWQ6IGV2ZW50LmlzSG92ZXJlZCA/IGV2ZW50LmNlbGwuZGF0ZSA6IG51bGxcbiAgICB9O1xuICB9XG5cbiAgbWluRGF0ZShkYXRlOiBEYXRlKTogQWN0aW9uIHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogQnNEYXRlcGlja2VyQWN0aW9ucy5TRVRfTUlOX0RBVEUsXG4gICAgICBwYXlsb2FkOiBkYXRlXG4gICAgfTtcbiAgfVxuXG4gIG1heERhdGUoZGF0ZTogRGF0ZSk6IEFjdGlvbiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IEJzRGF0ZXBpY2tlckFjdGlvbnMuU0VUX01BWF9EQVRFLFxuICAgICAgcGF5bG9hZDogZGF0ZVxuICAgIH07XG4gIH1cblxuICBkYXlzRGlzYWJsZWQoZGF5czogbnVtYmVyW10pOiBBY3Rpb24ge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBCc0RhdGVwaWNrZXJBY3Rpb25zLlNFVF9EQVlTRElTQUJMRUQsXG4gICAgICBwYXlsb2FkOiBkYXlzXG4gICAgfTtcbiAgfVxuXG4gIGRhdGVzRGlzYWJsZWQoZGF0ZXM6IERhdGVbXSk6IEFjdGlvbiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IEJzRGF0ZXBpY2tlckFjdGlvbnMuU0VUX0RBVEVTRElTQUJMRUQsXG4gICAgICBwYXlsb2FkOiBkYXRlc1xuICAgIH07XG4gIH1cblxuICBkYXRlc0VuYWJsZWQoZGF0ZXM6IERhdGVbXSk6IEFjdGlvbiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IEJzRGF0ZXBpY2tlckFjdGlvbnMuU0VUX0RBVEVTRU5BQkxFRCxcbiAgICAgIHBheWxvYWQ6IGRhdGVzXG4gICAgfTtcbiAgfVxuXG4gIGlzRGlzYWJsZWQodmFsdWU6IGJvb2xlYW4pOiBBY3Rpb24ge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBCc0RhdGVwaWNrZXJBY3Rpb25zLlNFVF9JU19ESVNBQkxFRCxcbiAgICAgIHBheWxvYWQ6IHZhbHVlXG4gICAgfTtcbiAgfVxuXG4gIHNldERhdGVDdXN0b21DbGFzc2VzKHZhbHVlOiBEYXRlcGlja2VyRGF0ZUN1c3RvbUNsYXNzZXNbXSk6IEFjdGlvbiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IEJzRGF0ZXBpY2tlckFjdGlvbnMuU0VUX0RBVEVfQ1VTVE9NX0NMQVNTRVMsXG4gICAgICBwYXlsb2FkOiB2YWx1ZVxuICAgIH07XG4gIH1cblxuICBzZXRMb2NhbGUobG9jYWxlOiBzdHJpbmcpOiBBY3Rpb24ge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBCc0RhdGVwaWNrZXJBY3Rpb25zLlNFVF9MT0NBTEUsXG4gICAgICBwYXlsb2FkOiBsb2NhbGVcbiAgICB9O1xuICB9XG59XG4iXX0=