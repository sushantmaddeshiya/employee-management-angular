{"version":3,"file":"ngx-bootstrap-accordion.js","sources":["ng:/ngx-bootstrap/accordion/accordion.config.ts","ng:/ngx-bootstrap/accordion/accordion.component.ts","ng:/ngx-bootstrap/accordion/accordion-group.component.ts","ng:/ngx-bootstrap/accordion/accordion.module.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\n\n/**\n * Configuration service, provides default values for the AccordionComponent.\n */\n@Injectable()\nexport class AccordionConfig {\n  /** Whether the other panels should be closed when a panel is opened */\n  closeOthers: Boolean = false;\n  /** turn on/off animation */\n  isAnimated: Boolean = false;\n}\n","import { Component, Input } from '@angular/core';\nimport { AccordionPanelComponent } from './accordion-group.component';\nimport { AccordionConfig } from './accordion.config';\n\n/** Displays collapsible content panels for presenting information in a limited amount of space. */\n@Component({\n  selector: 'accordion',\n  template: `<ng-content></ng-content>`,\n  host: {\n    '[attr.aria-multiselectable]': 'closeOthers',\n    role: 'tablist',\n    class: 'panel-group',\n    style: 'display: block'\n  }\n})\nexport class AccordionComponent {\n  /** turn on/off animation */\n  @Input() isAnimated = false;\n  /** if `true` expanding one item will close all others */\n  @Input() closeOthers: boolean;\n\n  protected groups: AccordionPanelComponent[] = [];\n\n  constructor(config: AccordionConfig) {\n    Object.assign(this, config);\n  }\n\n  closeOtherPanels(openGroup: AccordionPanelComponent): void {\n    if (!this.closeOthers) {\n      return;\n    }\n\n    this.groups.forEach((group: AccordionPanelComponent) => {\n      if (group !== openGroup) {\n        group.isOpen = false;\n      }\n    });\n  }\n\n  addGroup(group: AccordionPanelComponent): void {\n    group.isAnimated = this.isAnimated;\n    this.groups.push(group);\n  }\n\n  removeGroup(group: AccordionPanelComponent): void {\n    const index = this.groups.indexOf(group);\n    if (index !== -1) {\n      this.groups.splice(index, 1);\n    }\n  }\n}\n","import {\n  Component, HostBinding, Inject, Input, OnDestroy, OnInit, Output, EventEmitter\n} from '@angular/core';\nimport { isBs3 } from 'ngx-bootstrap/utils';\nimport { AccordionComponent } from './accordion.component';\n\n/**\n * ### Accordion heading\n * Instead of using `heading` attribute on the `accordion-group`, you can use\n * an `accordion-heading` attribute on `any` element inside of a group that\n * will be used as group's header template.\n */\n@Component({\n  selector: 'accordion-group, accordion-panel',\n  templateUrl: './accordion-group.component.html',\n  host: {\n    class: 'panel',\n    style: 'display: block'\n  },\n  styleUrls: ['./accordion.scss']\n})\nexport class AccordionPanelComponent implements OnInit, OnDestroy {\n  /** turn on/off animation */\n  isAnimated = false;\n  /** Clickable text in accordion's group header, check `accordion heading` below for using html in header */\n  @Input() heading: string;\n  /** Provides an ability to use Bootstrap's contextual panel classes\n   * (`panel-primary`, `panel-success`, `panel-info`, etc...).\n   * List of all available classes [available here]\n   * (https://getbootstrap.com/docs/3.3/components/#panels-alternatives)\n   */\n  @Input() panelClass: string;\n  /** if <code>true</code> â disables accordion group */\n  @Input() isDisabled: boolean;\n  /** Emits when the opened state changes */\n  @Output() isOpenChange: EventEmitter<boolean> = new EventEmitter();\n\n  // Questionable, maybe .panel-open should be on child div.panel element?\n  /** Is accordion group open or closed. This property supports two-way binding */\n  @HostBinding('class.panel-open')\n  @Input()\n  get isOpen(): boolean {\n    return this._isOpen;\n  }\n\n  set isOpen(value: boolean) {\n    if (value !== this.isOpen) {\n      if (value) {\n        this.accordion.closeOtherPanels(this);\n      }\n      this._isOpen = value;\n      Promise.resolve(null).then(() => {\n        this.isOpenChange.emit(value);\n      })\n        .catch((error: Error) => {\n          /* tslint:disable: no-console */\n          console.log(error);\n        });\n    }\n  }\n\n  get isBs3(): boolean {\n    return isBs3();\n  }\n\n  protected _isOpen = false;\n  protected accordion: AccordionComponent;\n\n  constructor(@Inject(AccordionComponent) accordion: AccordionComponent) {\n    this.accordion = accordion;\n  }\n\n  ngOnInit(): void {\n    this.panelClass = this.panelClass || 'panel-default';\n    this.accordion.addGroup(this);\n  }\n\n  ngOnDestroy(): void {\n    this.accordion.removeGroup(this);\n  }\n\n  toggleOpen(): void {\n    if (!this.isDisabled) {\n      this.isOpen = !this.isOpen;\n    }\n  }\n}\n","/* tslint:disable: max-classes-per-file */\nimport { CommonModule } from '@angular/common';\nimport { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { AccordionComponent } from './accordion.component';\nimport { AccordionConfig } from './accordion.config';\nimport { AccordionPanelComponent } from './accordion-group.component';\nimport { CollapseModule } from 'ngx-bootstrap/collapse';\n\n@NgModule({\n  imports: [CommonModule, CollapseModule],\n  declarations: [AccordionComponent, AccordionPanelComponent],\n  exports: [AccordionComponent, AccordionPanelComponent]\n})\nexport class AccordionModule {\n  static forRoot(): ModuleWithProviders {\n    return { ngModule: AccordionModule, providers: [AccordionConfig] };\n  }\n}\n"]}