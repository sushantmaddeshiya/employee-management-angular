{"version":3,"file":"ngx-bootstrap-accordion.umd.js","sources":["ng:/ngx-bootstrap/accordion/accordion.config.ts","ng:/ngx-bootstrap/accordion/accordion.component.ts","ng:/ngx-bootstrap/accordion/accordion-group.component.ts","ng:/ngx-bootstrap/accordion/accordion.module.ts"],"names":["Injectable","Component","Input","EventEmitter","isBs3","Inject","Output","HostBinding","NgModule","CommonModule","CollapseModule"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\n\n/**\n * Configuration service, provides default values for the AccordionComponent.\n */\n@Injectable()\nexport class AccordionConfig {\n  /** Whether the other panels should be closed when a panel is opened */\n  closeOthers: Boolean = false;\n  /** turn on/off animation */\n  isAnimated: Boolean = false;\n}\n","import { Component, Input } from '@angular/core';\nimport { AccordionPanelComponent } from './accordion-group.component';\nimport { AccordionConfig } from './accordion.config';\n\n/** Displays collapsible content panels for presenting information in a limited amount of space. */\n@Component({\n  selector: 'accordion',\n  template: `<ng-content></ng-content>`,\n  host: {\n    '[attr.aria-multiselectable]': 'closeOthers',\n    role: 'tablist',\n    class: 'panel-group',\n    style: 'display: block'\n  }\n})\nexport class AccordionComponent {\n  /** turn on/off animation */\n  @Input() isAnimated = false;\n  /** if `true` expanding one item will close all others */\n  @Input() closeOthers: boolean;\n\n  protected groups: AccordionPanelComponent[] = [];\n\n  constructor(config: AccordionConfig) {\n    Object.assign(this, config);\n  }\n\n  closeOtherPanels(openGroup: AccordionPanelComponent): void {\n    if (!this.closeOthers) {\n      return;\n    }\n\n    this.groups.forEach((group: AccordionPanelComponent) => {\n      if (group !== openGroup) {\n        group.isOpen = false;\n      }\n    });\n  }\n\n  addGroup(group: AccordionPanelComponent): void {\n    group.isAnimated = this.isAnimated;\n    this.groups.push(group);\n  }\n\n  removeGroup(group: AccordionPanelComponent): void {\n    const index = this.groups.indexOf(group);\n    if (index !== -1) {\n      this.groups.splice(index, 1);\n    }\n  }\n}\n","import {\n  Component, HostBinding, Inject, Input, OnDestroy, OnInit, Output, EventEmitter\n} from '@angular/core';\nimport { isBs3 } from 'ngx-bootstrap/utils';\nimport { AccordionComponent } from './accordion.component';\n\n/**\n * ### Accordion heading\n * Instead of using `heading` attribute on the `accordion-group`, you can use\n * an `accordion-heading` attribute on `any` element inside of a group that\n * will be used as group's header template.\n */\n@Component({\n  selector: 'accordion-group, accordion-panel',\n  templateUrl: './accordion-group.component.html',\n  host: {\n    class: 'panel',\n    style: 'display: block'\n  },\n  styleUrls: ['./accordion.scss']\n})\nexport class AccordionPanelComponent implements OnInit, OnDestroy {\n  /** turn on/off animation */\n  isAnimated = false;\n  /** Clickable text in accordion's group header, check `accordion heading` below for using html in header */\n  @Input() heading: string;\n  /** Provides an ability to use Bootstrap's contextual panel classes\n   * (`panel-primary`, `panel-success`, `panel-info`, etc...).\n   * List of all available classes [available here]\n   * (https://getbootstrap.com/docs/3.3/components/#panels-alternatives)\n   */\n  @Input() panelClass: string;\n  /** if <code>true</code> â disables accordion group */\n  @Input() isDisabled: boolean;\n  /** Emits when the opened state changes */\n  @Output() isOpenChange: EventEmitter<boolean> = new EventEmitter();\n\n  // Questionable, maybe .panel-open should be on child div.panel element?\n  /** Is accordion group open or closed. This property supports two-way binding */\n  @HostBinding('class.panel-open')\n  @Input()\n  get isOpen(): boolean {\n    return this._isOpen;\n  }\n\n  set isOpen(value: boolean) {\n    if (value !== this.isOpen) {\n      if (value) {\n        this.accordion.closeOtherPanels(this);\n      }\n      this._isOpen = value;\n      Promise.resolve(null).then(() => {\n        this.isOpenChange.emit(value);\n      })\n        .catch((error: Error) => {\n          /* tslint:disable: no-console */\n          console.log(error);\n        });\n    }\n  }\n\n  get isBs3(): boolean {\n    return isBs3();\n  }\n\n  protected _isOpen = false;\n  protected accordion: AccordionComponent;\n\n  constructor(@Inject(AccordionComponent) accordion: AccordionComponent) {\n    this.accordion = accordion;\n  }\n\n  ngOnInit(): void {\n    this.panelClass = this.panelClass || 'panel-default';\n    this.accordion.addGroup(this);\n  }\n\n  ngOnDestroy(): void {\n    this.accordion.removeGroup(this);\n  }\n\n  toggleOpen(): void {\n    if (!this.isDisabled) {\n      this.isOpen = !this.isOpen;\n    }\n  }\n}\n","/* tslint:disable: max-classes-per-file */\nimport { CommonModule } from '@angular/common';\nimport { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { AccordionComponent } from './accordion.component';\nimport { AccordionConfig } from './accordion.config';\nimport { AccordionPanelComponent } from './accordion-group.component';\nimport { CollapseModule } from 'ngx-bootstrap/collapse';\n\n@NgModule({\n  imports: [CommonModule, CollapseModule],\n  declarations: [AccordionComponent, AccordionPanelComponent],\n  exports: [AccordionComponent, AccordionPanelComponent]\n})\nexport class AccordionModule {\n  static forRoot(): ModuleWithProviders {\n    return { ngModule: AccordionModule, providers: [AccordionConfig] };\n  }\n}\n"]}