/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
export class ModalOptions {
}
ModalOptions.ɵfac = function ModalOptions_Factory(t) { return new (t || ModalOptions)(); };
ModalOptions.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: ModalOptions, factory: ModalOptions.ɵfac });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ModalOptions, [{
        type: Injectable
    }], null, null); })();
if (false) {
    /**
     *  Includes a modal-backdrop element. Alternatively,
     *  specify static for a backdrop which doesn't close the modal on click.
     * @type {?}
     */
    ModalOptions.prototype.backdrop;
    /**
     * Closes the modal when escape key is pressed.
     * @type {?}
     */
    ModalOptions.prototype.keyboard;
    /** @type {?} */
    ModalOptions.prototype.focus;
    /**
     * Shows the modal when initialized.
     * @type {?}
     */
    ModalOptions.prototype.show;
    /**
     * Ignore the backdrop click
     * @type {?}
     */
    ModalOptions.prototype.ignoreBackdropClick;
    /**
     * Css class for opened modal
     * @type {?}
     */
    ModalOptions.prototype.class;
    /**
     * Toggle animation
     * @type {?}
     */
    ModalOptions.prototype.animated;
    /**
     * Modal data
     * @type {?}
     */
    ModalOptions.prototype.initialState;
    /**
     * Modal providers
     * @type {?}
     */
    ModalOptions.prototype.providers;
    /**
     * aria-labelledby attribute value to set on the modal window
     * @type {?}
     */
    ModalOptions.prototype.ariaLabelledBy;
    /**
     * aria-describedby attribute value to set on the modal window
     * @type {?}
     */
    ModalOptions.prototype.ariaDescribedby;
}
/** @type {?} */
export const modalConfigDefaults = {
    backdrop: true,
    keyboard: true,
    focus: true,
    show: false,
    ignoreBackdropClick: false,
    class: '',
    animated: true,
    initialState: {}
};
/** @type {?} */
export const CLASS_NAME = {
    SCROLLBAR_MEASURER: 'modal-scrollbar-measure',
    BACKDROP: 'modal-backdrop',
    OPEN: 'modal-open',
    FADE: 'fade',
    IN: 'in',
    // bs3
    SHOW: 'show' // bs4
};
/** @type {?} */
export const SELECTOR = {
    DIALOG: '.modal-dialog',
    DATA_TOGGLE: '[data-toggle="modal"]',
    DATA_DISMISS: '[data-dismiss="modal"]',
    FIXED_CONTENT: '.navbar-fixed-top, .navbar-fixed-bottom, .is-fixed'
};
/** @type {?} */
export const TRANSITION_DURATIONS = {
    MODAL: 300,
    BACKDROP: 150
};
/** @type {?} */
export const DISMISS_REASONS = {
    BACKRDOP: 'backdrop-click',
    ESC: 'esc'
};

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kYWwtb3B0aW9ucy5jbGFzcy5qcyIsInNvdXJjZXMiOlsibmc6L25neC1ib290c3RyYXAvbW9kYWwvbW9kYWwtb3B0aW9ucy5jbGFzcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBa0IsTUFBTSxlQUFlLENBQUM7O0FBSTNELE1BQU0sT0FBTyxZQUFZO0FBQ3pCO3dDQUZDLFVBQVU7Ozs7MEJBQ1Q7QUFBQztBQUFhO0FBQVE7QUFFd0I7QUFDc0I7QUFFakU7QUFBUSxJQUFYLGdDQUE4QjtBQUNoQztBQUNFO0FBQ0U7QUFDVztBQUVmLElBRkUsZ0NBQW1CO0FBQ3JCO0FBRUMsSUFEQyw2QkFBZ0I7QUFDbEI7QUFDRTtBQUNFO0FBQ1c7QUFDVixJQURILDRCQUFlO0FBQ2pCO0FBQ0U7QUFDRTtBQUNXO0FBQVEsSUFBckIsMkNBQThCO0FBQ2hDO0FBQ0U7QUFDRTtBQUNXO0FBQ1YsSUFESCw2QkFBZTtBQUNqQjtBQUNFO0FBQ0U7QUFDVztBQUNkLElBREMsZ0NBQW1CO0FBQ3JCO0FBQ0U7QUFDRTtBQUNXO0FBQVEsSUFBckIsb0NBQXNCO0FBQ3hCO0FBQ0U7QUFDRTtBQUNXO0FBQVEsSUFBckIsaUNBQTZCO0FBQy9CO0FBQ0U7QUFDRTtBQUNXO0FBQVEsSUFBckIsc0NBQXdCO0FBQzFCO0FBQ0U7QUFDRTtBQUNXO0FBQVEsSUFBckIsdUNBQXlCO0FBQzNCO0FBQ0E7QUFFQSxNQUFNLE9BQU8sbUJBQW1CLEdBQWlCO0FBQ2pELElBQUUsUUFBUSxFQUFFLElBQUk7QUFDaEIsSUFBRSxRQUFRLEVBQUUsSUFBSTtBQUNoQixJQUFFLEtBQUssRUFBRSxJQUFJO0FBQ2IsSUFBRSxJQUFJLEVBQUUsS0FBSztBQUNiLElBQUUsbUJBQW1CLEVBQUUsS0FBSztBQUM1QixJQUFFLEtBQUssRUFBRSxFQUFFO0FBQ1gsSUFBRSxRQUFRLEVBQUUsSUFBSTtBQUNoQixJQUFFLFlBQVksRUFBRSxFQUFFO0FBQ2xCLENBQUM7QUFDRDtBQUNBLE1BQU0sT0FBTyxVQUFVLEdBQWM7QUFDckMsSUFBRSxrQkFBa0IsRUFBRSx5QkFBeUI7QUFDL0MsSUFBRSxRQUFRLEVBQUUsZ0JBQWdCO0FBQzVCLElBQUUsSUFBSSxFQUFFLFlBQVk7QUFDcEIsSUFBRSxJQUFJLEVBQUUsTUFBTTtBQUNkLElBQUUsRUFBRSxFQUFFLElBQUk7QUFBRTtBQUNSLElBQUYsSUFBSSxFQUFFLE1BQU0sQ0FBQyxNQUFNO0FBQ3JCLENBQUM7QUFDRDtBQUNBLE1BQU0sT0FBTyxRQUFRLEdBQWE7QUFDbEMsSUFBRSxNQUFNLEVBQUUsZUFBZTtBQUN6QixJQUFFLFdBQVcsRUFBRSx1QkFBdUI7QUFDdEMsSUFBRSxZQUFZLEVBQUUsd0JBQXdCO0FBQ3hDLElBQUUsYUFBYSxFQUFFLG9EQUFvRDtBQUNyRSxDQUFDO0FBQ0Q7QUFDQSxNQUFNLE9BQU8sb0JBQW9CLEdBQXdCO0FBQ3pELElBQUUsS0FBSyxFQUFFLEdBQUc7QUFDWixJQUFFLFFBQVEsRUFBRSxHQUFHO0FBQ2YsQ0FBQztBQUNEO0FBQ0EsTUFBTSxPQUFPLGVBQWUsR0FBbUI7QUFDL0MsSUFBRSxRQUFRLEVBQUUsZ0JBQWdCO0FBQzVCLElBQUUsR0FBRyxFQUFFLEtBQUs7QUFDWixDQUFDO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBTdGF0aWNQcm92aWRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ2xhc3NOYW1lLCBEaXNtaXNzUmVhc29ucywgU2VsZWN0b3IsIFRyYW5zaXRpb25EdXJhdGlvbnMgfSBmcm9tICcuL21vZGVscyc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBNb2RhbE9wdGlvbnMge1xuICAvKipcbiAgICogIEluY2x1ZGVzIGEgbW9kYWwtYmFja2Ryb3AgZWxlbWVudC4gQWx0ZXJuYXRpdmVseSxcbiAgICogIHNwZWNpZnkgc3RhdGljIGZvciBhIGJhY2tkcm9wIHdoaWNoIGRvZXNuJ3QgY2xvc2UgdGhlIG1vZGFsIG9uIGNsaWNrLlxuICAgKi9cbiAgYmFja2Ryb3A/OiBib29sZWFuIHwgJ3N0YXRpYyc7XG4gIC8qKlxuICAgKiBDbG9zZXMgdGhlIG1vZGFsIHdoZW4gZXNjYXBlIGtleSBpcyBwcmVzc2VkLlxuICAgKi9cbiAga2V5Ym9hcmQ/OiBib29sZWFuO1xuXG4gIGZvY3VzPzogYm9vbGVhbjtcbiAgLyoqXG4gICAqIFNob3dzIHRoZSBtb2RhbCB3aGVuIGluaXRpYWxpemVkLlxuICAgKi9cbiAgc2hvdz86IGJvb2xlYW47XG4gIC8qKlxuICAgKiBJZ25vcmUgdGhlIGJhY2tkcm9wIGNsaWNrXG4gICAqL1xuICBpZ25vcmVCYWNrZHJvcENsaWNrPzogYm9vbGVhbjtcbiAgLyoqXG4gICAqIENzcyBjbGFzcyBmb3Igb3BlbmVkIG1vZGFsXG4gICAqL1xuICBjbGFzcz86IHN0cmluZztcbiAgLyoqXG4gICAqIFRvZ2dsZSBhbmltYXRpb25cbiAgICovXG4gIGFuaW1hdGVkPzogYm9vbGVhbjtcbiAgLyoqXG4gICAqIE1vZGFsIGRhdGFcbiAgICovXG4gIGluaXRpYWxTdGF0ZT86IE9iamVjdDtcbiAgLyoqXG4gICAqIE1vZGFsIHByb3ZpZGVyc1xuICAgKi9cbiAgcHJvdmlkZXJzPzogU3RhdGljUHJvdmlkZXJbXTtcbiAgLyoqXG4gICAqIGFyaWEtbGFiZWxsZWRieSBhdHRyaWJ1dGUgdmFsdWUgdG8gc2V0IG9uIHRoZSBtb2RhbCB3aW5kb3dcbiAgICovXG4gIGFyaWFMYWJlbGxlZEJ5Pzogc3RyaW5nO1xuICAvKipcbiAgICogYXJpYS1kZXNjcmliZWRieSBhdHRyaWJ1dGUgdmFsdWUgdG8gc2V0IG9uIHRoZSBtb2RhbCB3aW5kb3dcbiAgICovXG4gIGFyaWFEZXNjcmliZWRieT86IHN0cmluZztcbn1cblxuXG5leHBvcnQgY29uc3QgbW9kYWxDb25maWdEZWZhdWx0czogTW9kYWxPcHRpb25zID0ge1xuICBiYWNrZHJvcDogdHJ1ZSxcbiAga2V5Ym9hcmQ6IHRydWUsXG4gIGZvY3VzOiB0cnVlLFxuICBzaG93OiBmYWxzZSxcbiAgaWdub3JlQmFja2Ryb3BDbGljazogZmFsc2UsXG4gIGNsYXNzOiAnJyxcbiAgYW5pbWF0ZWQ6IHRydWUsXG4gIGluaXRpYWxTdGF0ZToge31cbn07XG5cbmV4cG9ydCBjb25zdCBDTEFTU19OQU1FOiBDbGFzc05hbWUgPSB7XG4gIFNDUk9MTEJBUl9NRUFTVVJFUjogJ21vZGFsLXNjcm9sbGJhci1tZWFzdXJlJyxcbiAgQkFDS0RST1A6ICdtb2RhbC1iYWNrZHJvcCcsXG4gIE9QRU46ICdtb2RhbC1vcGVuJyxcbiAgRkFERTogJ2ZhZGUnLFxuICBJTjogJ2luJywgLy8gYnMzXG4gIFNIT1c6ICdzaG93JyAvLyBiczRcbn07XG5cbmV4cG9ydCBjb25zdCBTRUxFQ1RPUjogU2VsZWN0b3IgPSB7XG4gIERJQUxPRzogJy5tb2RhbC1kaWFsb2cnLFxuICBEQVRBX1RPR0dMRTogJ1tkYXRhLXRvZ2dsZT1cIm1vZGFsXCJdJyxcbiAgREFUQV9ESVNNSVNTOiAnW2RhdGEtZGlzbWlzcz1cIm1vZGFsXCJdJyxcbiAgRklYRURfQ09OVEVOVDogJy5uYXZiYXItZml4ZWQtdG9wLCAubmF2YmFyLWZpeGVkLWJvdHRvbSwgLmlzLWZpeGVkJ1xufTtcblxuZXhwb3J0IGNvbnN0IFRSQU5TSVRJT05fRFVSQVRJT05TOiBUcmFuc2l0aW9uRHVyYXRpb25zID0ge1xuICBNT0RBTDogMzAwLFxuICBCQUNLRFJPUDogMTUwXG59O1xuXG5leHBvcnQgY29uc3QgRElTTUlTU19SRUFTT05TOiBEaXNtaXNzUmVhc29ucyA9IHtcbiAgQkFDS1JET1A6ICdiYWNrZHJvcC1jbGljaycsXG4gIEVTQzogJ2VzYydcbn07XG4iXX0=