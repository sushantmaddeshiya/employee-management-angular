/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
export class CarouselConfig {
    constructor() {
        /* Default interval of auto changing of slides */
        this.interval = 5000;
        /* Is loop of auto changing of slides can be paused */
        this.noPause = false;
        /* Is slides can wrap from the last to the first slide */
        this.noWrap = false;
        /* Show carousel-indicators */
        this.showIndicators = true;
        /* Slides can be paused on focus */
        this.pauseOnFocus = false;
        /* If `true` - carousel indicators indicate slides chunks works ONLY if singleSlideOffset = FALSE */
        this.indicatorsByChunk = false;
        /* If value more then 1 — carousel works in multilist mode */
        this.itemsPerSlide = 1;
        /* If `true` — carousel shifts by one element. By default carousel shifts by number
            of visible elements (itemsPerSlide field) */
        this.singleSlideOffset = false;
    }
}
CarouselConfig.ɵfac = function CarouselConfig_Factory(t) { return new (t || CarouselConfig)(); };
CarouselConfig.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: CarouselConfig, factory: CarouselConfig.ɵfac });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CarouselConfig, [{
        type: Injectable
    }], function () { return []; }, null); })();
if (false) {
    /** @type {?} */
    CarouselConfig.prototype.interval;
    /** @type {?} */
    CarouselConfig.prototype.noPause;
    /** @type {?} */
    CarouselConfig.prototype.noWrap;
    /** @type {?} */
    CarouselConfig.prototype.showIndicators;
    /** @type {?} */
    CarouselConfig.prototype.pauseOnFocus;
    /** @type {?} */
    CarouselConfig.prototype.indicatorsByChunk;
    /** @type {?} */
    CarouselConfig.prototype.itemsPerSlide;
    /** @type {?} */
    CarouselConfig.prototype.singleSlideOffset;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2Fyb3VzZWwuY29uZmlnLmpzIiwic291cmNlcyI6WyJuZzovbmd4LWJvb3RzdHJhcC9jYXJvdXNlbC9jYXJvdXNlbC5jb25maWcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBRzNDLE1BQU0sT0FBTyxjQUFjO0FBQzNCLElBRkE7QUFDRTtBQUM0QixRQUM1QixhQUFRLEdBQUcsSUFBSSxDQUFDO0FBQ2xCO0FBRUssUUFBSCxZQUFPLEdBQUcsS0FBSyxDQUFDO0FBQ2xCO0FBRUssUUFBSCxXQUFNLEdBQUcsS0FBSyxDQUFDO0FBQ2pCO0FBRUssUUFBSCxtQkFBYyxHQUFHLElBQUksQ0FBQztBQUN4QjtBQUVLLFFBQUgsaUJBQVksR0FBRyxLQUFLLENBQUM7QUFDdkI7QUFFSyxRQUFILHNCQUFpQixHQUFHLEtBQUssQ0FBQztBQUM1QjtBQUVLLFFBQUgsa0JBQWEsR0FBRyxDQUFDLENBQUM7QUFDcEI7QUFFSztBQUNRLFFBQVgsc0JBQWlCLEdBQUcsS0FBSyxDQUFDO0FBQzVCLElBQUEsQ0FBQztBQUNEOzBDQTNCQyxVQUFVOzs7O2dEQUNUO0FBQUM7QUFBYTtBQUNULElBQ0wsa0NBQWdCO0FBQ2xCO0FBQ29CLElBQ2xCLGlDQUFnQjtBQUNsQjtBQUNvQixJQUNsQixnQ0FBZTtBQUNqQjtBQUNvQixJQUNsQix3Q0FBc0I7QUFDeEI7QUFDb0IsSUFDbEIsc0NBQXFCO0FBQ3ZCO0FBQ29CLElBQ2xCLDJDQUEwQjtBQUM1QjtBQUNvQixJQUNsQix1Q0FBa0I7QUFDcEI7QUFDb0IsSUFFbEIsMkNBQTBCO0FBQzVCO0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBDYXJvdXNlbENvbmZpZyB7XG4gIC8qIERlZmF1bHQgaW50ZXJ2YWwgb2YgYXV0byBjaGFuZ2luZyBvZiBzbGlkZXMgKi9cbiAgaW50ZXJ2YWwgPSA1MDAwO1xuXG4gIC8qIElzIGxvb3Agb2YgYXV0byBjaGFuZ2luZyBvZiBzbGlkZXMgY2FuIGJlIHBhdXNlZCAqL1xuICBub1BhdXNlID0gZmFsc2U7XG5cbiAgLyogSXMgc2xpZGVzIGNhbiB3cmFwIGZyb20gdGhlIGxhc3QgdG8gdGhlIGZpcnN0IHNsaWRlICovXG4gIG5vV3JhcCA9IGZhbHNlO1xuXG4gIC8qIFNob3cgY2Fyb3VzZWwtaW5kaWNhdG9ycyAqL1xuICBzaG93SW5kaWNhdG9ycyA9IHRydWU7XG5cbiAgLyogU2xpZGVzIGNhbiBiZSBwYXVzZWQgb24gZm9jdXMgKi9cbiAgcGF1c2VPbkZvY3VzID0gZmFsc2U7XG5cbiAgLyogSWYgYHRydWVgIC0gY2Fyb3VzZWwgaW5kaWNhdG9ycyBpbmRpY2F0ZSBzbGlkZXMgY2h1bmtzIHdvcmtzIE9OTFkgaWYgc2luZ2xlU2xpZGVPZmZzZXQgPSBGQUxTRSAqL1xuICBpbmRpY2F0b3JzQnlDaHVuayA9IGZhbHNlO1xuXG4gIC8qIElmIHZhbHVlIG1vcmUgdGhlbiAxIOKAlCBjYXJvdXNlbCB3b3JrcyBpbiBtdWx0aWxpc3QgbW9kZSAqL1xuICBpdGVtc1BlclNsaWRlID0gMTtcblxuICAvKiBJZiBgdHJ1ZWAg4oCUIGNhcm91c2VsIHNoaWZ0cyBieSBvbmUgZWxlbWVudC4gQnkgZGVmYXVsdCBjYXJvdXNlbCBzaGlmdHMgYnkgbnVtYmVyXG4gICAgb2YgdmlzaWJsZSBlbGVtZW50cyAoaXRlbXNQZXJTbGlkZSBmaWVsZCkgKi9cbiAgc2luZ2xlU2xpZGVPZmZzZXQgPSBmYWxzZTtcbn1cbiJdfQ==