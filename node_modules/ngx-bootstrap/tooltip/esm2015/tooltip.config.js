/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
/**
 * Default values provider for tooltip
 */
import * as ɵngcc0 from '@angular/core';
export class TooltipConfig {
    constructor() {
        /**
         * sets disable adaptive position
         */
        this.adaptivePosition = true;
        /**
         * tooltip placement, supported positions: 'top', 'bottom', 'left', 'right'
         */
        this.placement = 'top';
        /**
         * array of event names which triggers tooltip opening
         */
        this.triggers = 'hover focus';
        /**
         * delay before showing the tooltip
         */
        this.delay = 0;
    }
}
TooltipConfig.ɵfac = function TooltipConfig_Factory(t) { return new (t || TooltipConfig)(); };
TooltipConfig.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: TooltipConfig, factory: TooltipConfig.ɵfac });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TooltipConfig, [{
        type: Injectable
    }], function () { return []; }, null); })();
if (false) {
    /**
     * sets disable adaptive position
     * @type {?}
     */
    TooltipConfig.prototype.adaptivePosition;
    /**
     * tooltip placement, supported positions: 'top', 'bottom', 'left', 'right'
     * @type {?}
     */
    TooltipConfig.prototype.placement;
    /**
     * array of event names which triggers tooltip opening
     * @type {?}
     */
    TooltipConfig.prototype.triggers;
    /**
     * a selector specifying the element the tooltip should be appended to.
     * @type {?}
     */
    TooltipConfig.prototype.container;
    /**
     * delay before showing the tooltip
     * @type {?}
     */
    TooltipConfig.prototype.delay;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9vbHRpcC5jb25maWcuanMiLCJzb3VyY2VzIjpbIm5nOi9uZ3gtYm9vdHN0cmFwL3Rvb2x0aXAvdG9vbHRpcC5jb25maWcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0M7QUFDRztBQUF1Qzs7QUFFMUMsTUFBTSxPQUFPLGFBQWE7QUFDMUIsSUFGQTtBQUNFO0FBQVk7QUFDYTtBQUFZLFFBQ3JDLHFCQUFnQixHQUFHLElBQUksQ0FBQztBQUMxQjtBQUFZO0FBQ0U7QUFDVCxRQURILGNBQVMsR0FBRyxLQUFLLENBQUM7QUFDcEI7QUFBWTtBQUNFO0FBQVksUUFBeEIsYUFBUSxHQUFHLGFBQWEsQ0FBQztBQUMzQjtBQUFZO0FBQTRDO0FBQVksUUFHbEUsVUFBSyxHQUFHLENBQUMsQ0FBQztBQUNaLElBQUEsQ0FBQztBQUNEO3lDQWJDLFVBQVU7Ozs7Z0RBQ1Q7QUFBQztBQUFhO0FBQVE7QUFDUztBQUN2QjtBQUFRLElBQWhCLHlDQUF3QjtBQUMxQjtBQUFRO0FBQ0Y7QUFDSjtBQUFRLElBRFIsa0NBQWtCO0FBQ3BCO0FBQVE7QUFDRjtBQUFpQjtBQUNwQixJQURELGlDQUF5QjtBQUMzQjtBQUFRO0FBQ0Y7QUFDSjtBQUFRLElBRFIsa0NBQWtCO0FBQ3BCO0FBQVE7QUFDRjtBQUVFO0FBQVEsSUFGZCw4QkFBVTtBQUNaO0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbi8qKiBEZWZhdWx0IHZhbHVlcyBwcm92aWRlciBmb3IgdG9vbHRpcCAqL1xuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFRvb2x0aXBDb25maWcge1xuICAvKiogc2V0cyBkaXNhYmxlIGFkYXB0aXZlIHBvc2l0aW9uICovXG4gIGFkYXB0aXZlUG9zaXRpb24gPSB0cnVlO1xuICAvKiogdG9vbHRpcCBwbGFjZW1lbnQsIHN1cHBvcnRlZCBwb3NpdGlvbnM6ICd0b3AnLCAnYm90dG9tJywgJ2xlZnQnLCAncmlnaHQnICovXG4gIHBsYWNlbWVudCA9ICd0b3AnO1xuICAvKiogYXJyYXkgb2YgZXZlbnQgbmFtZXMgd2hpY2ggdHJpZ2dlcnMgdG9vbHRpcCBvcGVuaW5nICovXG4gIHRyaWdnZXJzID0gJ2hvdmVyIGZvY3VzJztcbiAgLyoqIGEgc2VsZWN0b3Igc3BlY2lmeWluZyB0aGUgZWxlbWVudCB0aGUgdG9vbHRpcCBzaG91bGQgYmUgYXBwZW5kZWQgdG8uICovXG4gIGNvbnRhaW5lcjogc3RyaW5nO1xuICAvKiogZGVsYXkgYmVmb3JlIHNob3dpbmcgdGhlIHRvb2x0aXAgKi9cbiAgZGVsYXkgPSAwO1xufVxuIl19